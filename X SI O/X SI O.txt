.386
.model flat, stdcall
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;includem biblioteci, si declaram ce functii vrem sa importam
includelib msvcrt.lib
extern exit: proc
extern malloc: proc
extern memset: proc

includelib canvas.lib
extern BeginDrawing: proc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;declaram simbolul start ca public - de acolo incepe executia
public start
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;sectiunile programului, date, respectiv cod
.data
;aici declaram date
format db "%d" ,13, 10 , 0
window_title DB "Proiect X si O",0
area_width EQU 640
area_height EQU 480
area DD 0


counter DD 0 ; numara evenimentele de tip timer

arg1 EQU 8
arg2 EQU 12
arg3 EQU 16
arg4 EQU 20

symbol_width EQU 10
symbol_height EQU 20
include digits.inc
include letters.inc
include X_O.inc

button_x EQU 100
button_y EQU 100
button_size EQU 80
button_size_dim DD button_size

rand_click DB 0
final_de_joc DB 0
numara_click DB 0

tabla_de_joc DB 15, 15, 15,
				15, 15, 15,
				15, 15, 15

.code
; procedura make_text afiseaza o litera sau o cifra la coordonatele date
; arg1 - simbolul de afisat (litera sau cifra)
; arg2 - pointer la vectorul de pixeli
; arg3 - pos_x
; arg4 - pos_y
make_text proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat
	cmp eax, 'A'
	jl make_digit
	cmp eax, 'Z'
	jg make_digit
	sub eax, 'A'
	lea esi, letters
	jmp draw_text
make_digit:
	cmp eax, '0'
	jl make_space
	cmp eax, '9'
	jg make_space
	sub eax, '0'
	lea esi, digits
	jmp draw_text
make_space:	
	mov eax, 26 ; de la 0 pana la 25 sunt litere, 26 e space
	lea esi, letters
	
draw_text:
	mov ebx, symbol_width
	mul ebx
	mov ebx, symbol_height
	mul ebx
	add esi, eax
	mov ecx, symbol_height
bucla_simbol_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, symbol_height
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, symbol_width
bucla_simbol_coloane:
	cmp byte ptr [esi], 0
	je simbol_pixel_alb
	mov dword ptr [edi], 0
	jmp simbol_pixel_next
simbol_pixel_alb:
	mov dword ptr [edi], 0FFFFFFh
simbol_pixel_next:
	inc esi
	add edi, 4
	loop bucla_simbol_coloane
	pop ecx
	loop bucla_simbol_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_text endp

; un macro ca sa apelam mai usor desenarea simbolului
make_text_macro macro symbol, drawArea, x, y
	push y
	push x
	push drawArea
	push symbol
	call make_text
	add esp, 16
endm


line_horizontal macro x,y, len, color
local bucla_line
     mov eax, y
	 mov ebx, area_width
	 mul ebx
	 add eax,x
	 shl eax, 2
	 add eax, area
	 mov ecx,len
bucla_line:
     mov dword ptr[eax],color
     add eax, 4
     loop bucla_line	 
endm

line_vertical macro x,y, len, color
local bucla_line
mov eax,y
mov ebx, area_width
mul ebx
add eax,x
shl eax,2
add eax, area 
mov ecx, len
bucla_line:
    mov dword ptr[eax], color
	add eax, area_width*4
	loop bucla_line
endm

pune_x_si_0 macro x, y
local rand0, randX
; cand e randul lui 0 rand_click o sa fie 0, iar cand e randul lui X rand_click o sa fie 1
	cmp rand_click, 1
	je rand0
	
	make_text_macro 'X', area, x, y
	mov rand_click, 1
	
	jmp randX
	
	rand0:
	make_text_macro '0', area, x, y
	mov rand_click, 0

	randX:
endm

castiga_x macro 

	make_text_macro 'C', area, 10, 360
	make_text_macro 'A', area, 20, 360
	make_text_macro 'S', area, 30, 360
	make_text_macro 'T', area, 40, 360
	make_text_macro 'I', area, 50, 360
	make_text_macro 'G', area, 60, 360
	make_text_macro 'A', area, 70, 360
	make_text_macro 'T', area, 80, 360
	make_text_macro 'O', area, 90, 360
	make_text_macro 'R', area, 100, 360
	
	make_text_macro 'X', area, 120, 360
	
	;pun final joc pe 1
	mov final_de_joc, 1
	jmp afisare_litere

endm

castiga_0 macro 
	
	make_text_macro 'C', area, 10, 360
	make_text_macro 'A', area, 20, 360
	make_text_macro 'S', area, 30, 360
	make_text_macro 'T', area, 40, 360
	make_text_macro 'I', area, 50, 360
	make_text_macro 'G', area, 60, 360
	make_text_macro 'A', area, 70, 360
	make_text_macro 'T', area, 80, 360
	make_text_macro 'O', area, 90, 360
	make_text_macro 'R', area, 100, 360
	
	make_text_macro '0', area, 120, 360
	
	;pun final joc pe 1
	mov final_de_joc, 1
	jmp afisare_litere
	
endm

egalitate macro 

	make_text_macro 'R', area, 10, 360
	make_text_macro 'E', area, 20, 360
	make_text_macro 'M', area, 30, 360
	make_text_macro 'I', area, 40, 360
	make_text_macro 'Z', area, 50, 360
	make_text_macro 'A', area, 60, 360
	
	;pun final joc pe 1
	mov final_de_joc, 1
	jmp afisare_litere
	
endm

verificare_tabla_de_joc macro
local castigator_x, castigator_0, remiza, final_verificare
	;in final de joc am initial 0, iar daca castiga x sau 0 il pun pe 1 pt a indica finalul jocului
	cmp final_de_joc, 1
	je afisare_litere

	;linia 1
	;doar coordonatele din matrice tb modificate
	mov al, tabla_de_joc[0][0]
	add al, tabla_de_joc[0][1]
	add al, tabla_de_joc[0][2]
	
	cmp al, 0 
	je castigator_0
	cmp al, 3
	je castigator_x
	
	;coloana 1
	
	mov al, tabla_de_joc[0][0]
	add al, tabla_de_joc[3][0]
	add al, tabla_de_joc[6][0]
	
	cmp al, 0 
	je castigator_0
	cmp al, 3
	je castigator_x
	
	
; ramane la final
	
	; remiza
	
	cmp numara_click, 9
	je remiza

	jmp final_verificare
castigator_0:
	castiga_0
	jmp final_verificare
castigator_x:
	castiga_x
	jmp final_verificare
remiza:
	egalitate
	jmp final_verificare

final_verificare:

endm

; functia de desenare - se apeleaza la fiecare click
; sau la fiecare interval de 200ms in care nu s-a dat click
; arg1 - evt (0 - initializare, 1 - click, 2 - s-a scurs intervalul fara click)
; arg2 - x
; arg3 - y
draw proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1]
	cmp eax, 1
	jz evt_click
	cmp eax, 2
	jz evt_timer ; nu s-a efectuat click pe nimic
	;mai jos e codul care intializeaza fereastra cu pixeli albi
	mov eax, area_width
	mov ebx, area_height
	mul ebx
	shl eax, 2
	push eax
	push 255
	push area
	call memset
	add esp, 12
	jmp afisare_litere
	line_horizontal[ebp+arg2], [ebp+arg3], 30, 0FFh
	line_vertical [ebp+arg2], [ebp+arg3], 30, 0FFh
evt_click:
	mov eax, [ebp+arg2]; x
	mov ebx, [ebp+arg3]; y
	
	;cresc numarul de click-uri apasate
	inc numara_click
		
	; determin casuta in care s-a dat click
buton_1:
	; determin daca coordonatele sunt dupa conltul din stanga sus
	; de modificat la restul butoanelor
	cmp eax, button_x 
	jl buton_2
	; de modificat la restul butoanelor
	cmp ebx, button_y
	jl buton_2
	; determin daca coordonatele nu depasesc coltul din dreapta jos
	; de modificat la restul butoanelor
	cmp eax, button_x + button_size
	jg buton_2
	; de modificat la restul butoanelor
	cmp ebx, button_y + button_size
	jg buton_2
	
	;pun x sau 0 in primul buton_1 daca e liber, daca e liber valoarea in matrice e 15 daca nu in matrice se va afla 0 sau 1 in functie de caracterul pus
	;de modificat la restul butoanelor
	cmp tabla_de_joc[0][0], 15
	jne afisare_litere
	
	;de modificat la restul butoanelor
	pune_x_si_0 button_x + 10, button_y + 10
	mov dl, rand_click
	;de modificat la restul butoanelor
	mov tabla_de_joc[0][0], dl
	
	
buton_2:
	cmp eax, button_x + button_size 
	jl buton_3
	cmp ebx, button_y
	jl buton_3
	cmp eax, button_x + button_size + button_size
	jg buton_3
	cmp ebx, button_y + button_size
	jg buton_3
	
	;pun x sau 0 in primul buton_1 daca e liber, daca e liber valoarea in matrice e 15 daca nu in matrice se va afla 0 sau 1 in functie de caracterul pus
	cmp tabla_de_joc[0][1], 15
	jne afisare_litere
	
	pune_x_si_0 button_x + button_size + 10, button_y + 10
	mov dl, rand_click
	mov tabla_de_joc[0][1], dl
	
	
buton_3:

	; aici trebuie sa modifici sa pui pentru butonul 3, 4, 5,... 9
	; la butonul 9 se da jump direct la afisare litere daca nu respecta conditia
	; pentru randul 2 din matrice trebuie tabla_de_joc[3][0], tabla_de_joc[3][1], tabla_de_joc[3][2]
	; pentru randul 3 tabla_de_joc[6][0], tabla_de_joc[6][1], tabla_de_joc[6][2]
	cmp eax, button_x + button_size +button_size
	jl buton_4
	cmp ebx, button_y
	jl buton_4
	cmp eax, button_x + button_size + button_size+button_size
	jg buton_4
	cmp ebx, button_y + button_size
	jg buton_4
	
	;pun x sau 0 in primul buton_1 daca e liber, daca e liber valoarea in matrice e 15 daca nu in matrice se va afla 0 sau 1 in functie de caracterul pus
	cmp tabla_de_joc[0][2], 15
	jne afisare_litere
	
	pune_x_si_0 button_x + button_size+button_size + 10, button_y + 10
	mov dl, rand_click
	mov tabla_de_joc[0][2], dl
	
buton_4:
	cmp eax, button_x 
	jl buton_5
	cmp ebx, button_y+button_size
	jl buton_5
	cmp eax, button_x + button_size
	jg buton_5
	cmp ebx, button_y + button_size+button_size
	jg buton_5
	
	;pun x sau 0 in primul buton_1 daca e liber, daca e liber valoarea in matrice e 15 daca nu in matrice se va afla 0 sau 1 in functie de caracterul pus
	cmp tabla_de_joc[3][0], 15
	jne afisare_litere
	
	pune_x_si_0 button_x  + 10, button_y +button_size+10
	mov dl, rand_click
	mov tabla_de_joc[3][0], dl

buton_5:
     cmp eax, button_x +button_size
	jl buton_6
	cmp ebx, button_y+button_size
	jl buton_6
	cmp eax, button_x + button_size+button_size
	jg buton_6
	cmp ebx, button_y + button_size+button_size
	jg buton_6
	
	;pun x sau 0 in primul buton_1 daca e liber, daca e liber valoarea in matrice e 15 daca nu in matrice se va afla 0 sau 1 in functie de caracterul pus
	cmp tabla_de_joc[3][1], 15
	jne afisare_litere
	
	pune_x_si_0 button_x  + button_size+10, button_y +button_size+10
	mov dl, rand_click
	mov tabla_de_joc[3][1], dl
		
buton_6:
     cmp eax, button_x +button_size+button_size
	jl buton_7
	cmp ebx, button_y+ button_size
	jl buton_7
	cmp eax, button_x + button_size+button_size+button_size
	jg buton_7
	cmp ebx, button_y + button_size+button_size
	jg buton_7
	
	;pun x sau 0 in primul buton_1 daca e liber, daca e liber valoarea in matrice e 15 daca nu in matrice se va afla 0 sau 1 in functie de caracterul pus
	cmp tabla_de_joc[3][2], 15
	jne afisare_litere
	
	pune_x_si_0 button_x  + button_size+button_size+10, button_y +button_size+10
	mov dl, rand_click
	mov tabla_de_joc[3][2], dl

buton_7:
	cmp eax, button_x 
	jl buton_8
	cmp ebx, button_y+button_size+button_size
	jl buton_8
	cmp eax, button_x + button_size
	jg buton_8
	cmp ebx, button_y + button_size+button_size+button_size
	jg buton_8
	
	;pun x sau 0 in primul buton_1 daca e liber, daca e liber valoarea in matrice e 15 daca nu in matrice se va afla 0 sau 1 in functie de caracterul pus
	cmp tabla_de_joc[6][0], 15
	jne afisare_litere
	
	pune_x_si_0 button_x  + 10, button_y +button_size+button_size+10
	mov dl, rand_click
	mov tabla_de_joc[6][0], dl
	
	
buton_8:
    cmp eax, button_x +button_size
	jl buton_9
	cmp ebx, button_y+button_size+button_size
	jl buton_9
	cmp eax, button_x + button_size+button_size
	jg buton_9
	cmp ebx, button_y + button_size+button_size+button_size
	jg buton_9
	
	;pun x sau 0 in primul buton_1 daca e liber, daca e liber valoarea in matrice e 15 daca nu in matrice se va afla 0 sau 1 in functie de caracterul pus
	cmp tabla_de_joc[6][1], 15
	jne afisare_litere
	
	pune_x_si_0 button_x  +button_size+ 10, button_y +button_size+button_size+10
	mov dl, rand_click
	mov tabla_de_joc[6][1], dl
	
buton_9:
    cmp eax, button_x +button_size+button_size
	jl afisare_litere
	cmp ebx, button_y+ button_size+button_size
	jl afisare_litere
	cmp eax, button_x + button_size+button_size+button_size
	jg afisare_litere
	cmp ebx, button_y + button_size+button_size+button_size
	jg afisare_litere
	
	;pun x sau 0 in primul buton_1 daca e liber, daca e liber valoarea in matrice e 15 daca nu in matrice se va afla 0 sau 1 in functie de caracterul pus
	cmp tabla_de_joc[6][2], 15
	jne afisare_litere
	
	pune_x_si_0 button_x  + button_size+button_size+10, button_y +button_size+button_size+10
	mov dl, rand_click
	mov tabla_de_joc[6][2], dl	
	
	jmp afisare_litere
    
evt_timer:
	inc counter
	verificare_tabla_de_joc
	
afisare_litere:
	;verific daca exista castigator
	;afisam valoarea counter-ului curent (sute, zeci si unitati)
	mov ebx, 10
	mov eax, counter
	;cifra unitatilor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 30, 10
	;cifra zecilor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 20, 10
	;cifra sutelor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 10, 10
	
	;scriem un mesaj
	make_text_macro 'T', area, 10, 50
	make_text_macro 'I', area, 20, 50
	make_text_macro 'C', area, 30, 50
	make_text_macro ' ', area, 40, 50
	make_text_macro 'T', area, 50, 50
	make_text_macro 'A', area, 60, 50
	make_text_macro 'T', area, 70, 50
	
	make_text_macro 'T', area, 90, 50
	make_text_macro 'O', area, 100, 50
	make_text_macro 'E', area, 110, 50
	
	
	
	
	line_horizontal button_x, button_y, button_size,0
	line_horizontal button_x, button_y+button_size, button_size,0
	line_vertical button_x, button_y, button_size,0
	line_vertical button_x+button_size, button_y, button_size,0
	line_horizontal button_x+button_size, button_y, button_size,0
	line_vertical button_x+button_size+button_size, button_y, button_size,0
	line_vertical button_x+button_size+button_size+button_size, button_y, button_size,0
	line_horizontal button_x, button_y+button_size+button_size, button_size,0
	line_horizontal button_x+button_size, button_y+button_size, button_size,0
    line_horizontal button_x+button_size+button_size, button_y+button_size+button_size, button_size,0
	line_horizontal button_x+button_size, button_y+button_size+button_size, button_size,0
	line_vertical button_x+button_size+button_size+button_size, button_y+button_size, button_size,0
	line_horizontal button_x+button_size+button_size, button_y, button_size,0
	line_horizontal button_x+button_size+button_size, button_y+button_size, button_size,0
	line_vertical button_x, button_y+button_size, button_size,0
	line_vertical button_x+button_size, button_y+button_size, button_size,0
	line_vertical button_x+button_size+button_size, button_y+button_size, button_size,0
	line_vertical button_x+button_size+button_size, button_y+button_size+button_size, button_size,0
	line_vertical button_x+button_size+button_size+button_size, button_y+button_size+button_size, button_size,0
	line_vertical button_x+button_size, button_y+button_size+button_size, button_size,0
	line_vertical button_x, button_y+button_size+button_size, button_size,0
	line_horizontal button_x+button_size+button_size, button_y+button_size+button_size+button_size, button_size,0
	line_horizontal button_x+button_size, button_y+button_size+button_size+button_size, button_size,0
	line_horizontal button_x, button_y+button_size+button_size+button_size, button_size,0
	
	
	
	

final_draw:
	popa
	mov esp, ebp
	pop ebp
	ret
draw endp

start:
mov eax,area_width
mov ebx, area_height
mul ebx
shl eax,2
push eax
call malloc
add esp,4
mov area, eax
;apelam functia de desenare a ferestrei
	; typedef void (*DrawFunc)(int evt, int x, int y);
	; void __cdecl BeginDrawing(const char *title, int width, int height, unsigned int *area, DrawFunc draw);
	push offset draw
	push area
	push area_height
	push area_width
	push offset window_title
	call BeginDrawing
	add esp, 20
	
	;terminarea programului
	push 0
	call exit
end start
	
	call exit
end start
